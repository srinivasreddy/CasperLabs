branches:
  - dev
  - master
  - release-*
  - testing*

# Common parts

# FYI: There's no merging of arrays in YAML. At least not in the Go library
# Drone uses to parse YAML. So if you mix in &sbtenv and want to add
# additional volumes, as in package step, you need to specify all volumes.

__buildenv: &buildenv
  image: casperlabs/buildenv:latest

__sbtenv: &sbtenv
  <<: *buildenv
  environment:
    - _JAVA_OPTIONS=-Xms2G -Xmx4G -XX:MaxMetaspaceSize=1G
  volumes:
    - /var/cache/cl-build/.sbt:/root/.sbt
    - /var/cache/cl-build/.ivy2:/root/.ivy2

# Build definition

clone:
  git-clone:
    image: casperlabs/buildenv:latest
    group: clone
    commands: |
      set -ex
      git clone -b ${DRONE_TAG:-$DRONE_BRANCH} $DRONE_REMOTE_URL .
      if [ x$DRONE_PULL_REQUEST != x ]; then
          git fetch origin refs/pull/$DRONE_PULL_REQUEST/head
          EMAIL=ci git merge --no-edit FETCH_HEAD
      fi
      git rev-parse HEAD

  # The following steps labeled as '*-mac' are used to check and compile
  # portions of the pipeline. This method mimics what was suggested in the
  # below articles:
  #    https://discourse.drone.io/t/multiple-build-machines/630/2
  #    https://www.fwd.cloud/commit/post/drone-ios-deployments/
  #
  # The mac server is configured following our Developer.md suggestions
  # for mac users. Please see the Developer.md for specifics.

  git-clone-mac:
    image: appleboy/drone-ssh
    group: clone
    secrets: [ ssh_key, ssh_host, ssh_username ]
    script: |
      set -ex
      mkdir DRONE_BUILD_${DRONE_BUILD_NUMBER}
      cd DRONE_BUILD_${DRONE_BUILD_NUMBER}
      git clone -b ${DRONE_TAG:-${DRONE_BRANCH}} ${DRONE_REMOTE_URL} .
      if [ x${DRONE_PULL_REQUEST} != x ]; then
          git fetch origin refs/pull/${DRONE_PULL_REQUEST}/head
          EMAIL=ci git merge --no-edit FETCH_HEAD
      fi
      git rev-parse HEAD
pipeline:

  # pr

  sbt-update:
    <<: *sbtenv
    commands:
      - sbt update

  compile:
    <<: *sbtenv
    commands:
      - sbt compile test:compile doc

  compile-rust:
    <<: *buildenv
    commands:
      - cd execution-engine/
      - ~/.cargo/bin/cargo update
      - ~/.cargo/bin/cargo build

  run-rust-tests:
    <<: *buildenv
    group: test
    commands:
      - cd execution-engine/
      - ~/.cargo/bin/cargo test

  run-rust-tests-mac:
    image: appleboy/drone-ssh
    group: test
    secrets: [ ssh_key, ssh_host, ssh_username ]
    command_timeout: 3600s
    script: |
      cd DRONE_BUILD_${DRONE_BUILD_NUMBER}
      export PATH=$PATH:/usr/local/bin
      cd execution-engine/
      ~/.cargo/bin/cargo test

  run-rust-lints:
    <<: *buildenv
    group: test
    commands:
      - cd execution-engine
      - ~/.cargo/bin/rustup toolchain install $(cat rust-toolchain)
      - ~/.cargo/bin/rustup component add --toolchain=$(cat rust-toolchain) clippy
      - ~/.cargo/bin/cargo clippy --all-targets --all -- -D warnings -A renamed_and_removed_lints

  run-unit-tests:
    <<: *sbtenv
    group: test
    commands:
      - sbt test

  docker-build-node-engine-and-client:	
    <<: *sbtenv	
    commands:	
      - sbt node/docker:publishLocal client/docker:publishLocal
      - export DOCKER_LATEST_TAG=DRONE-${DRONE_BUILD_NUMBER}
      - make docker-build/execution-engine
    volumes:	
      - /var/run/docker.sock:/var/run/docker.sock

  run-integration-tests:
    <<: *sbtenv
    commands:
      - python3 -m pip install pipenv dataclasses typing_extensions
      - cd integration-testing
      - ./run_tests.sh
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp:/tmp

  # push

  package-client-deb-universal:
    <<: *sbtenv
    commands:
      - sbt client/debian:packageBin client/universal:packageZipTarball
      - mkdir -p artifacts/${DRONE_BRANCH}
      - cp client/target/casperlabs-client_*_all.deb client/target/universal/*.tgz artifacts/${DRONE_BRANCH}
    volumes:
      - /var/cache/cl-build/.sbt:/root/.sbt
      - /var/cache/cl-build/.ivy2:/root/.ivy2
      - /var/run/docker.sock:/var/run/docker.sock
    when:
      event: [ push, tag ]

  package-client-rpm:
    <<: *sbtenv
    commands:
      - env JAVAC_VERSION=1.8 sbt clean compile doc client/rpm:packageBin
      - mkdir -p artifacts/${DRONE_BRANCH}
      - cp client/target/rpm/RPMS/noarch/casperlabs-client-*.noarch.rpm artifacts/${DRONE_BRANCH}
    volumes:
      - /var/cache/cl-build/.sbt:/root/.sbt
      - /var/cache/cl-build/.ivy2:/root/.ivy2
    when:
      event: [ push, tag ]

  package-node-deb-universal:
    <<: *sbtenv
    commands:
      - sbt node/debian:packageBin node/universal:packageZipTarball
      - mkdir -p artifacts/${DRONE_BRANCH}
      - cp node/target/casperlabs-node_*_all.deb node/target/universal/*.tgz artifacts/${DRONE_BRANCH}
    volumes:
      - /var/cache/cl-build/.sbt:/root/.sbt
      - /var/cache/cl-build/.ivy2:/root/.ivy2
      - /var/run/docker.sock:/var/run/docker.sock
    when:
      event: [ push, tag ]

  package-node-rpm:
    <<: *sbtenv
    commands:
      - env JAVAC_VERSION=1.8 sbt clean compile doc node/rpm:packageBin
      - mkdir -p artifacts/${DRONE_BRANCH}
      - cp node/target/rpm/RPMS/noarch/casperlabs-node-*.noarch.rpm artifacts/${DRONE_BRANCH}
    volumes:
      - /var/cache/cl-build/.sbt:/root/.sbt
      - /var/cache/cl-build/.ivy2:/root/.ivy2
    when:
      event: [ push, tag ]

  package-ee:
    <<: *buildenv
    group: package-ee
    commands:
      - mkdir -p artifacts/${DRONE_BRANCH}
      - make cargo-package-all
      - cp execution-engine/target/debian/casperlabs-engine-grpc-server_*.deb artifacts/${DRONE_BRANCH}
      - cp execution-engine/target/release/rpmbuild/RPMS/x86_64/casperlabs-engine-grpc-server-*.rpm artifacts/${DRONE_BRANCH}
      - >-
        WORKING_DIR=$(pwd) ;
        cd execution-engine/target/release/rpmbuild/SOURCES ;
        OS=$(uname -s | tr '[:upper:]' '[:lower:]') ;
        ARCH=$(uname -p) ;
        SOURCE=$(ls casperlabs-engine-grpc-server-*.tar.gz | sed "s/.tar.gz//") ;
        TARGET=$(ls $SOURCE*.tar.gz | sed "s/.tar.gz/_"$OS"_"$ARCH".tar.gz/") ;
        tar -xzf $SOURCE.tar.gz ;
        tar -czf $TARGET -C $SOURCE/usr/bin/ . &&
        cp $TARGET $WORKING_DIR/artifacts/${DRONE_BRANCH}
    when:
      event: [ push, tag ]

  package-ee-mac:
    image: appleboy/drone-ssh
    group: package-ee
    secrets: [ ssh_key, ssh_host, ssh_username ]
    command_timeout: 3600s
    script: |
      cd DRONE_BUILD_${DRONE_BUILD_NUMBER}
      mkdir -p artifacts/${DRONE_BRANCH}
      export PATH=$PATH:/usr/local/bin:~/.cargo/bin
      echo $PATH
      mkdir -p artifacts/${DRONE_BRANCH}
      make cargo-package-all
      WORKING_DIR=$(pwd) ;
      cd execution-engine/target/release/rpmbuild/SOURCES ;
      OS=$(uname -s | tr '[:upper:]' '[:lower:]') ;
      ARCH=$(uname -p) ;
      SOURCE=$(ls casperlabs-engine-grpc-server-*.tar.gz | sed "s/.tar.gz//") ;
      TARGET=$(ls $SOURCE*.tar.gz | sed "s/.tar.gz/_"$OS"_"$ARCH".tar.gz/") ;
      tar -xzf $SOURCE.tar.gz ;
      tar -czf $TARGET -C $SOURCE/usr/bin/ . &&
      cp $TARGET $WORKING_DIR/artifacts/${DRONE_BRANCH}
    when:
      event: [ push, tag ]

  copy-mac-tar-drone-container:
    <<: *buildenv
    secrets: [ ssh_username, ssh_key, ssh_host ]
    commands:
      - mkdir -p ~/.ssh
      - mkdir -p artifacts/
      - umask 077 && echo "$SSH_KEY" > ~/.ssh/id_rsa
      - rsync -avzhe "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" $SSH_USERNAME@$SSH_HOST:DRONE_BUILD_${DRONE_BUILD_NUMBER}/artifacts/${DRONE_BRANCH}/casperlabs-engine-grpc-server-*darwin*.gz artifacts/${DRONE_BRANCH}/
    when:
      event: [ push, tag ]

  rsync-artifacts:
    image: drillster/drone-rsync
    hosts: [ $REPO_HOST ]
    target: $REPO_PATH/
    source: artifacts/${DRONE_BRANCH}
    secrets: [ repo_host, rsync_user, rsync_key, repo_path ]
    delete: true
    recursive: true
    when:
      event: [ push, tag ]

  github_publish_release_artifacts:
    image: plugins/github-release
    prerelease: true
    files:
      - artifacts/${DRONE_BRANCH}/*
    checksum:
     - sha256
     - md5
    secrets: [github_token]
    when:
      branch: master
      event: tag

  docker-publish:
    <<: *buildenv
    commands: |
      echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      if [ ! -z ${DRONE_TAG} ]; then
        REF=${DRONE_TAG}
      else
        REF=${DRONE_BRANCH}
      fi
      docker tag casperlabs/node:DRONE-${DRONE_BUILD_NUMBER} casperlabs/node:"$REF"
      docker tag casperlabs/client:DRONE-${DRONE_BUILD_NUMBER} casperlabs/client:"$REF"
      docker tag casperlabs/execution-engine:DRONE-${DRONE_BUILD_NUMBER} casperlabs/execution-engine:"$REF"
      docker push casperlabs/node:"$REF"
      docker push casperlabs/client:"$REF"
      docker push casperlabs/execution-engine:"$REF"
      if [ "${DRONE_BRANCH}" = "master" ]; then
        docker tag casperlabs/node:DRONE-${DRONE_BUILD_NUMBER} casperlabs/node:latest
        docker tag casperlabs/client:DRONE-${DRONE_BUILD_NUMBER} casperlabs/client:latest
        docker tag casperlabs/execution-engine:DRONE-${DRONE_BUILD_NUMBER} casperlabs/execution-engine:latest
        docker push casperlabs/node:latest
        docker push casperlabs/client:latest
        docker push casperlabs/execution-engine:latest
      fi
      echo "done"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    secrets: [ docker_username, docker_password ]
    when:
      event: [ push, tag ]

  cleanup:
    <<: *sbtenv
    group: cleanup
    commands:
      - docker ps -qa | xargs --no-run-if-empty  docker stop | xargs --no-run-if-empty docker rm
      - docker images --filter "dangling=true" -q --no-trunc | xargs --no-run-if-empty docker rmi -f
      - docker images | grep "DRONE-${DRONE_BUILD_NUMBER}" | awk '{print $3}' | xargs --no-run-if-empty docker rmi -f
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    when:
      status: [ failure, success ]

# mac xargs doesn't have --no-run-if-empty
  cleanup-mac:
    image: appleboy/drone-ssh
    group: cleanup
    secrets: [ ssh_key, ssh_host, ssh_username ]
    script: |
      export PATH=$PATH:/usr/local/bin
      docker rmi -f $(docker images -f "dangling=true" -q) || true
      rm -rf DRONE_BUILD_${DRONE_BUILD_NUMBER}
    when:
      status: [ failure, success ]

  notify:
    image: plugins/slack
    channel: alerts
    secrets: [ slack_webhook ]
    when:
      status: [ failure ]
